r1 = Role.create({ name: 'Regular', description: 'Can read and create quotes. Can update and destroy own quotes' })
r2 = Role.create({ name: 'Employee', description: 'Employee' })
r3 = Role.create({ name: 'Admin', description: 'Can perform any CRUD operation on any resource' })

u1 = User.create({ name: 'Sally', email: 'sally@example.com', password: 'aaaaaaaa', password_confirmation: 'aaaaaaaa', role_id: r1.id })
u2 = User.create({ name: 'Sue', email: 'sue@example.com', password: 'aaaaaaaa', password_confirmation: 'aaaaaaaa', role_id: r1.id })
u3 = User.create({ name: 'Kev', email: 'kev@example.com', password: 'aaaaaaaa', password_confirmation: 'aaaaaaaa', role_id: r2.id })
u4 = User.create({ name: 'Jack', email: 'jack@example.com', password: 'aaaaaaaa', password_confirmation: 'aaaaaaaa', role_id: r3.id })
u5 = User.create({ name: 'Admin', email: 'admin@admin', password: '123456', password_confirmation: '123456', role_id: r3.id })

q1 = Quote.create({ name: 'First Quote', building_type: 'residential', number_of_apartments: '500', number_of_floors: '50', number_of_basements: '5', user_id: u1.id})
q5 = Quote.create({ name: 'This Quote', building_type: 'residential', number_of_apartments: '300', number_of_floors: '30', number_of_basements: '2', user_id: u1.id})
q2 = Quote.create({ name: 'My Quote', building_type: 'residential', number_of_apartments: '400', number_of_floors: '40', number_of_basements: '10', user_id: u2.id})
q3 = Quote.create({ name: 'This Quote', building_type: 'residential', number_of_apartments: '300', number_of_floors: '30', number_of_basements: '2', user_id: u3.id})
q4 = Quote.create({ name: 'My Quote', building_type: 'residential', number_of_apartments: '600', number_of_floors: '60', number_of_basements: '5', user_id: u4.id})
q5 = Quote.create({ name: 'My Quote', building_type: 'residential', number_of_apartments: '600', number_of_floors: '60', number_of_basements: '5', user_id: u5.id})
q6 = Quote.create({ name: 'My Quote', building_type: 'residential', number_of_apartments: '600', number_of_floors: '60', number_of_basements: '5', user_id: u5.id})


   add_reference :employess, :user



   master clean
   public repo during the deployment
   cap production deploy
   ssh ubuntu@(ip addresse from production.rb server"99.79.123.96")
   ssh ubuntu@99.79.123.96
   now connecte on the amazon
   ls all apps are there 
   move to your app 
   move to shared
   move to config
   sudo nano database.yml
   copy and paste the database

++++++++++++++++++++
default: &default
  adapter: mysql2
  encoding: utf8
  username: codeboxx
  password: Codeboxx1!
  host: codeboxx.cq6zrczewpu2.us-east-1.rds.amazonaws.com
  port: 3306


development:
  <<: *default
  database: ma

  save and quit
  and exit with exit
  +++++++++++++++
  
  cap production puma:config
  cap production puma:nginx_config
  ask coach to do the config puma and nginx you will supply domaine name

  dns config in awls
  type A ip address is the one from production

  wait for the coach okay
  cap production deploy


  
default: &default
  adapter: mysql2
  encoding: utf8
  pool: <%= ENV.fetch("RAILS_MAX_THREADS") { 5 } %>
  username: root
  password: Admin007*
  socket: /var/run/mysqld/mysqld.sock

development:
  <<: *default
  database: Rocket_Elevators_Information_System_development


test:
  <<: *default
  database: Rocket_Elevators_Information_System_test




production:
  <<: *default
  database: Rocket_Elevators_Information_System_production
  username: Rocket_Elevators_Information_System
  password: <%= ENV['ROCKET_ELEVATORS_INFORMATION_SYSTEM_DATABASE_PASSWORD'] %>


<div class="container form col-md-4">
    <div id="name" class="col-md-4" style="display:none">
        <%= f.label :quotes_name %>
        <%= f.text_field :quotes_name %>
    </div>
     <div id="email" class="col-md-4" style="display:none">
        <%= f.label :quotes_email %>
        <%= f.text_field :quotes_email %>
    </div>
     <div id="company name" class="col-md-4" style="display:none">
        <%= f.label :quotes_company_name %>
        <%= f.text_field :quotes_company_name %>
    </div>
</div>

feed 404 when wrong address
if route redirect to 404
news mcourier 
rails g model full_name:string email:string phone:string company_name:string project_name:string department:string project_description:string message:text contact_attachment:binary



# double check for the date creation CUstomer can we use the t.timestamp
gonna add models tonigth 
clean the root directory
